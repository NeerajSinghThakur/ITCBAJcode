/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Utilities;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.testng.TestNG;
import org.testng.log4testng.Logger;
import org.testng.xml.XmlClass;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

/**
 *
 * @author baj80000445
 */
public class GUI_Page2 extends javax.swing.JFrame implements ActionListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	JCheckBox chckbxSelectAll;
	public static boolean runFromMasterPage = false;
	public String CurrentGUI = null;

	/**
	 * Creates new form Page2
	 */
	public GUI_Page2() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jButtonStart = new javax.swing.JButton();
		jButtonStop = new javax.swing.JButton();
		jButtonConfigure = new javax.swing.JButton();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTable2 = new javax.swing.JTable();
		jComboBox1 = new javax.swing.JComboBox<>();

		jButtonSelective = new javax.swing.JButton();
		jButtonSelective.setText("Select Test Cases");
		jButtonSelective.setBackground(Color.GREEN);
		jButtonSelective.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSelectiveActionPerformed(evt);
			}
		});

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		jButtonStart.setText("Start The Run");
		jButtonStart.setBackground(Color.GREEN);
		jButtonStart.addActionListener(this);
		jButtonStop.setText("Stop The Run");
		jButtonStop.setBackground(Color.RED);
		jButtonStop.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton4ActionPerformed(evt);
			}
		});
		jButtonConfigure.setText("Configure Accounts");
		jButtonConfigure.setBackground(Color.BLUE); // ALok
		jButtonConfigure.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});
		// Code to get the count of the test cases from the Master table:

		BAJ_General_GetJOLTCsCount TCsCount = new BAJ_General_GetJOLTCsCount();

		String SelectedChannel = GUI_Page1.getjComboBoxChannel();

		int TotalCount = TCsCount.BAJ_General_GetJOLTCsCountByModule("ALL");
		int initailCounter = 1;
		Object[][] obj = new Object[TotalCount][7];

		int initailLoopCounter = 0;
		int initailLoopCounter2 = 0;
		do {

			BAJ_JOL_GetTCDetails GetTCDetails = new BAJ_JOL_GetTCDetails();
			BAJ_JOL_SetGetTCDetails TCDetails = GetTCDetails.BAJ_JOL_SetGetTCDetails(initailCounter, SelectedChannel);
			obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetTCDetails.getID();
			initailLoopCounter2++;
			obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetTCDetails.getTS();
			initailLoopCounter2++;

			obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetTCDetails.getBrowser();
			initailLoopCounter2++;

			obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetTCDetails.getSegment();
			initailLoopCounter2++;

			obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetTCDetails.getIncludeInExecution();
			initailLoopCounter2++;

			obj[initailLoopCounter][initailLoopCounter2] = true;

			initailLoopCounter2++;

			initailLoopCounter2 = 0;
			initailLoopCounter++;
			initailCounter++;
		} while (TotalCount > initailCounter - 1);

		jTable2.setModel(new javax.swing.table.DefaultTableModel(obj, new Object[] { "ID", "TS Description", "Module Name", "Class Path", "IncludeInExecution", "Selected TSs" }

		)

		{

			private static final long serialVersionUID = 1L;

			/*
			 * @Override public Class getColumnClass(int column) { return getValueAt(0,
			 * column).getClass(); }
			 */
			@Override
			public Class getColumnClass(int column) {
				switch (column) {
				case 0:
					return String.class;
				case 1:
					return String.class;
				case 2:
					return String.class;
				case 3:
					return String.class;
				case 4:
					return String.class;
				default:
					return Boolean.class;
				}

			}

		}

		);
		;

		;

		for (int i = 0; i < jTable2.getRowCount(); i++) {
			jTable2.setRowHeight(i, 45);
		}

		jScrollPane2.setViewportView(jTable2);

		// BAJ_JOL_GetTCDetails GetTCDetails = new BAJ_JOL_GetTCDetails();
		// BAJ_JOL_SetGetTCDetails TCDetails =
		// GetTCDetails.BAJ_JOL_SetGetTCDetailsByModule(initailCounterint,
		// SelectedModule);

		// checkboxSelectAll.setLabel("Select All");
		BAJ_General_GetModulesFromMaster ModulesList = new BAJ_General_GetModulesFromMaster();
		List<String> DBResultArray1 = null;

		DBResultArray1 = ModulesList.BAJ_General_GetModulesFromMaster("GUI_Page2");
		// String C= ModulesLists.getID();
		// DBResultArray1.add("All");

		jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(DBResultArray1.toArray(new String[DBResultArray1.size()])));
		jComboBox1.addActionListener(this);
		String SelectedModule = (String) jComboBox1.getSelectedItem();

		// jButtonSelective.addActionListener(this);

		//

		chckbxSelectAll = new JCheckBox("Select All");
		chckbxSelectAll.setBounds(500, 400, 200, 400);
		chckbxSelectAll.setSelected(true);
		chckbxSelectAll.setBackground(Color.WHITE);
		chckbxSelectAll.setFont(new Font("Tahoma", Font.PLAIN, 13));
		chckbxSelectAll.addActionListener(this);
		getContentPane().add(chckbxSelectAll);
		float[] columnWidthPercentage = { 10.0f, 55.0f, 10.0f, 5.0f, 5.0f, 5.0f };

		int tW = jTable2.getWidth();
		TableColumn column;
		TableColumnModel jTableColumnModel = jTable2.getColumnModel();
		int cantCols = jTableColumnModel.getColumnCount();
		for (int i = 0; i < cantCols; i++) {
			column = jTableColumnModel.getColumn(i);
			int pWidth = Math.round(columnWidthPercentage[i] * tW);
			column.setPreferredWidth(pWidth);

		}

		//
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jScrollPane2).addContainerGap())
								.addGroup(layout.createSequentialGroup().addGap(8, 8, 8).addComponent(jButtonStart).addGap(18, 18, 18).addComponent(jButtonStop).addGap(29, 29, 29)
										.addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(22, 22, 22)
										.addComponent(chckbxSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 451, Short.MAX_VALUE).addComponent(jButtonConfigure).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(jButtonSelective).addGap(8, 8, 8)))));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
				layout.createSequentialGroup().addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE).addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButtonStart).addComponent(jButtonStop).addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButtonConfigure).addComponent(jButtonSelective))
								.addComponent(chckbxSelectAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(26, 26, 26))

		);

		pack();
		setVisible(true);
		setName("JOL Automation");
		setSize(1350, 900);
	}// </editor-fold>

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:

		GUI_Page4 m = new GUI_Page4();
		m.setVisible(true);
		// setVisible(false); // to hide the log in frame
	}

	private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			TestBase.tearDown();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	//
	private void jButtonSelectiveActionPerformed(java.awt.event.ActionEvent evt) {

		GUI_Page3 m = new GUI_Page3();
		m.setVisible(true);
		// setVisible(false); // to hide the log in frame

	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GUI_Page2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GUI_Page2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GUI_Page2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GUI_Page2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}

		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new GUI_Page2().setVisible(true);

			}
		});
	}

	// Variables declaration - do not modify
	private java.awt.Checkbox checkboxSelectAll;
	private javax.swing.JButton jButtonStart;
	private javax.swing.JButton jButtonStop;
	private javax.swing.JButton jButtonConfigure;
	private javax.swing.JButton jButtonSelective;
	private javax.swing.JComboBox<String> jComboBox1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTable jTable2;

	// End of variables declaration
	@Override

	public void actionPerformed(ActionEvent actionEvent) {
		// TODO Auto-generated method stub
		// get Channel string
		TestBase.isMasterClassRun = true;
		CurrentGUI = "GUI_Page2";
		Object source2 = actionEvent.getSource();
		String SelectedModule = (String) jComboBox1.getSelectedItem();
		System.out.println(SelectedModule);

		boolean[] IncludeInFlag = new boolean[jTable2.getRowCount()];

		String[] ModuleNames = new String[jTable2.getRowCount()];
		String[] ClassPath = new String[jTable2.getRowCount()];
		String[] TC_ID = new String[jTable2.getRowCount()];

		int RowCount = jTable2.getRowCount();

		Object source = actionEvent.getSource();
		if (source instanceof JButton) {

			for (int i = 0; i < RowCount; i++) {
				IncludeInFlag[i] = (boolean) jTable2.getValueAt(i, 5);
				ModuleNames[i] = (String) jTable2.getValueAt(i, 4);
				if (IncludeInFlag[i] && ModuleNames[i].equalsIgnoreCase("Y")) {

					ClassPath[i] = (String) jTable2.getValueAt(i, 3);
				}
				// System.out.println(jTable1(i, 5));
			}

			// The listener code

			TestNG testng = new TestNG();

			XmlSuite mySuite = new XmlSuite();

			mySuite.setName("ASQA Sample Suite");

			XmlTest myTest = new XmlTest(mySuite);

			myTest.setName("ASQA Sample Test");

			// Arrays.toString(Boolean[] IncludeInFlag);
			String IncludeInFlagString = Arrays.toString(IncludeInFlag);
			String TC_IDString = Arrays.toString(TC_ID);

			myTest.addParameter("IncludeInFlag", IncludeInFlagString);
			myTest.addParameter("SelectedTC_ID", TC_IDString);
			// myTest.addParameter("IncludeInFlag", IncludeInFlag);
			// myTest.addParameter("ModuleNames", ModuleNames);

			List<XmlClass> myClasses = new ArrayList<XmlClass>();

			for (int i = 0; i < RowCount; i++) {

				try {
					if (ClassPath[i] != null) {
						myClasses.add(new XmlClass(ClassPath[i]));
						System.out.println("Added class path for execution is : " + ClassPath[i]);
					}
				} catch (Exception e) {
					System.out.println("Error while creating text NG xml file. Check for classpath errors in DB.. " + ExceptionUtils.getStackTrace(e));
				}

			}
			myTest.setXmlClasses(myClasses);
			List<XmlTest> myTests = new ArrayList<XmlTest>();
			myTests.add(myTest);
			mySuite.setTests(myTests);
			List<XmlSuite> mySuites = new ArrayList<XmlSuite>();
			mySuites.add(mySuite);
			testng.setXmlSuites(mySuites);
			testng.run();
			System.out.println("Test run completed successfully. Stopping the code execution");
			System.exit(1);

		}

		BAJ_General_GetJOLTCsCount TCsCount = new BAJ_General_GetJOLTCsCount();
		String SelectedChannel2 = (String) jComboBox1.getSelectedItem();
		int TotalCount = TCsCount.BAJ_General_GetJOLTCsCountByModule(SelectedChannel2);

		BAJ_JOL_GetTCDetails initailCounter3 = new BAJ_JOL_GetTCDetails();
		// this will assign the first number in DB
		BAJ_JOL_SetGetTCDetails initailCounter = initailCounter3.BAJ_JOL_SetGetTCsCountByModule(SelectedChannel2);
		String Ini = BAJ_JOL_SetGetTCDetails.getID();

		Integer initailCounterint = Integer.valueOf(Ini);

		// int initailCounter = 1;
		Object[][] obj = new Object[TotalCount][7];

		int initailLoopCounter = 0;
		int initailLoopCounter2 = 0;
		SelectedModule = (String) jComboBox1.getSelectedItem();

		for (int i = 1; i < TotalCount + 1; i++) {
			BAJ_JOL_GetTCDetails GetTCDetails = new BAJ_JOL_GetTCDetails();
			BAJ_JOL_SetGetTCDetails TCDetails = GetTCDetails.BAJ_JOL_SetGetTCDetailsByModule(initailCounterint, SelectedModule);
			obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetTCDetails.getID();
			initailLoopCounter2++;
			obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetTCDetails.getTS();
			initailLoopCounter2++;

			obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetTCDetails.getBrowser();
			initailLoopCounter2++;

			obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetTCDetails.getSegment();
			initailLoopCounter2++;

			obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetTCDetails.getIncludeInExecution();
			initailLoopCounter2++;

			obj[initailLoopCounter][initailLoopCounter2] = true;
			initailLoopCounter2++;

			initailLoopCounter2 = 0;
			initailLoopCounter++;
			initailCounterint++;

		}

		jTable2.setModel(new javax.swing.table.DefaultTableModel(obj, new Object[] { "ID", "TS Description", "Module Name", "Class Path", "IncludeInExecution", "Selected TSs" }

		)

		{

			private static final long serialVersionUID = 1L;

			@Override
			public Class getColumnClass(int column) {
				switch (column) {
				case 0:
					return String.class;
				case 1:
					return String.class;
				case 2:
					return String.class;
				case 3:
					return String.class;
				case 4:
					return String.class;
				default:
					return Boolean.class;
				}

			}

		}

		);
		;

		for (int i = 0; i < jTable2.getRowCount(); i++) {
			jTable2.setRowHeight(i, 45);
		}

		boolean CheckBoxFlag = chckbxSelectAll.isSelected();

		Object source6 = actionEvent.getSource();
		if (source6.equals(chckbxSelectAll)) {
			System.out.println("testtest");
			if (CheckBoxFlag) {
				for (int i = 0; i < jTable2.getRowCount(); i++) {
					jTable2.setValueAt(true, i, 5);
				}

			}

			else

			{

				for (int i = 0; i < jTable2.getRowCount(); i++) {
					jTable2.setValueAt(false, i, 5);
				}
			}
		}

	}

}
