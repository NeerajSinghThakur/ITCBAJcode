/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Utilities;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.testng.TestNG;
import org.testng.xml.XmlClass;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

/**
 *
 * @author baj80000445
 */
public class GUI_Page3 extends javax.swing.JFrame implements ActionListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	JCheckBox chckbxSelectAll;

	/**
	 * Creates new form Page3
	 */
	public GUI_Page3() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jTable1 = new javax.swing.JTable();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jButton3 = new javax.swing.JButton();
		jButton4 = new javax.swing.JButton();
		jButton5 = new javax.swing.JButton();
		panel1 = new java.awt.Panel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] { "ID", "Description",
				"Script Name", "DataSet", "Class Path", "Module", "Positive/Negative", "Include" }));

		jScrollPane1.setViewportView(jTable1);

		jButton1.setText("Start The Run");
		jButton1.setBackground(Color.GREEN);
		jButton1.addActionListener(this);

		jButton2.setText("Stop The Run");
		jButton2.setBackground(Color.MAGENTA);
		
		jButton3.setText("Configure Accounts");
		jButton3.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});

		jButton4.setText("Add New TC");
		jButton4.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAddTCActionPerformed(evt);
			}
		});

		jButton5.setText("<< Back");
		jButton5.setBackground(Color.LIGHT_GRAY);
		jButton5.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonBackActionPerformed(evt);
			}
		});

		// Select all

		chckbxSelectAll = new JCheckBox("Select All");
		chckbxSelectAll.setBounds(500, 400, 200, 400);
		chckbxSelectAll.setSelected(true);
		chckbxSelectAll.setBackground(Color.GRAY);
		chckbxSelectAll.setFont(new Font("Tahoma", Font.PLAIN, 15));

		getContentPane().add(chckbxSelectAll);
		chckbxSelectAll.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				panelsActionPerformed(evt);
			}
		});

		// #######################################################################
		// ############ Design header Don't modify #################################

		Vector<String> columnIdentifiers = new Vector<String>(Arrays.asList(new String[] { "ID", "Description",
				"Script Name", "DataSet", "Class Path", "Module", "Positive/Negative", "Include" }));

		Vector<Vector<String>> dataVector = new Vector<Vector<String>>();

		jTable1.getTableHeader().setFont(jTable1.getTableHeader().getFont().deriveFont(15f).deriveFont(Font.BOLD));
		((DefaultTableModel) jTable1.getModel()).setDataVector(dataVector, columnIdentifiers);

		// #######################################################################
		// ############ Design Don't modify #################################

		javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);

		panel1.setLayout(panel1Layout);
		panel1Layout.setHorizontalGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 736, Short.MAX_VALUE));
		panel1Layout.setVerticalGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 67, Short.MAX_VALUE));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGroup(layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1)
						.addGroup(layout.createSequentialGroup().addContainerGap()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
										.addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(jButton2)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 162,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(47, 47, 47)
												.addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 161,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(39, 39, 39))
										.addGroup(layout.createSequentialGroup().addGap(66, 66, 66)
												.addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														208, Short.MAX_VALUE)))
								.addComponent(chckbxSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 451,
										Short.MAX_VALUE)

		)).addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup()
				.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButton1)
						.addComponent(jButton2).addComponent(jButton3).addComponent(jButton4))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap())
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
								layout.createSequentialGroup().addComponent(jButton5).addGap(21, 21, 21))
						.addComponent(chckbxSelectAll, javax.swing.GroupLayout.Alignment.TRAILING,
								javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGap(26, 26, 26)))

		;
		// ############ End of Design Don't modify #################################

		// #######################################################################
		// Modules check boxes

		BAJ_General_GetModulesFromMaster ModulesList = new BAJ_General_GetModulesFromMaster();
		List<String> DBResultArray1 = null;

		DBResultArray1 = ModulesList.BAJ_General_GetModulesFromMaster("GUI_Page3");
		JScrollPane jScrollPane1 = new JScrollPane(panel1);
		panel1.setLayout(new GridLayout(0, 2, 10, 10));
		String[] ModulesArray = DBResultArray1.toArray(new String[0]);
		JCheckBox[] panels = new JCheckBox[ModulesArray.length];

		panels[0] = new JCheckBox(ModulesArray[0]);
		for (int i = 0; i < ModulesArray.length; i++) {
			panels[i] = new JCheckBox(ModulesArray[i]);
			panel1.add(panels[i]);
			panel1.revalidate();
			panel1.repaint();
			panels[i].addActionListener(this);

		}

		add(jScrollPane1);

		// Modules check boxes End
		// #######################################################################

		// Full screen only
		pack();
		setVisible(true);
		setName("JOL Automation");
		setSize(1600, 990);

	}

	private void panelsActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:

		boolean CheckBoxFlag = chckbxSelectAll.isSelected();

		Object source6 = evt.getSource();
		if (source6.equals(chckbxSelectAll)) {
			if (CheckBoxFlag) {
				for (int i = 0; i < jTable1.getRowCount(); i++) {
					jTable1.setValueAt(true, i, 7);
				}

			}

			else

			{

				for (int i = 0; i < jTable1.getRowCount(); i++) {
					jTable1.setValueAt(false, i, 7);
				}
			}
		}

	}

	// </editor-fold>

	/**
	 * @param args
	 *            the command line arguments
	 */

	private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {
		setVisible(false); // to hide the log in frame
	}

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:

		GUI_Page4 m = new GUI_Page4();
		m.setVisible(true);
		// setVisible(false); // to hide the log in frame
	}

	private void GUI_AddNewTCjButton2ActionPerformed(java.awt.event.ActionEvent evt) {

		DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
		String[] NewData = GUI_AddNewTC.getDataToBeAdded();

		model.addRow(NewData);

	}

	private void jButtonAddTCActionPerformed(java.awt.event.ActionEvent evt) {

		GUI_AddNewTC m = new GUI_AddNewTC();
		m.setVisible(true);

		GUI_AddNewTC.jButton2.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				GUI_AddNewTCjButton2ActionPerformed(evt);
			}
		});

	}

	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GUI_Page3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GUI_Page3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GUI_Page3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GUI_Page3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new GUI_Page3().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify,.
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JButton jButton4;
	private javax.swing.JButton jButton5;
	private javax.swing.JScrollPane jScrollPane1;
	public javax.swing.JTable jTable1;
	private java.awt.Panel panel1;

	// End of variables declaration
	@SuppressWarnings("static-access")
	@Override
	public void actionPerformed(ActionEvent arg0) {
		// ############################### for the running start
		TestBase.isMasterClassRun=false;
		Object source2 = arg0.getSource();

		boolean[] IncludeInFlag = new boolean[jTable1.getRowCount()];

		String[] DataSet = new String[jTable1.getRowCount()];
		String[] ClassPath = new String[jTable1.getRowCount()];
		String[] TC_ID = new String[jTable1.getRowCount()];

		int RowCount = jTable1.getRowCount();
		int Checked_cases = 0;
		Object source = arg0.getSource();
		if (source instanceof JButton) {
			for (int i = 0; i < RowCount; i++) {
				IncludeInFlag[i] = (boolean) jTable1.getValueAt(i, 7);
				if (IncludeInFlag[i]) {
					Checked_cases++;
					ClassPath[i] = (String) jTable1.getValueAt(i, 4);
					DataSet[i] = (String) jTable1.getValueAt(i, 3);
					// ClassPath[i] = "javaTestCases.JOL.transfer.JOL_TRANSFERS_LOCAL_Test";
				}
				// System.out.println(jTable1(i, 5));
			}

			// The listener code

			TestNG testng = new TestNG();

			XmlSuite mySuite = new XmlSuite();

			mySuite.setName("ASQA Sample Suite");

			XmlTest myTest = new XmlTest(mySuite);

			myTest.setName("ASQA Sample Test");

			// Arrays.toString(Boolean[] IncludeInFlag);
			String IncludeInFlagString = Arrays.toString(IncludeInFlag);
			String TC_IDString = Arrays.toString(TC_ID);

			// myTest.addParameter("IncludeInFlag", IncludeInFlagString);
			// myTest.addParameter("SelectedTC_ID", TC_IDString);
			// myTest.addParameter("IncludeInFlag", IncludeInFlag);
			// myTest.addParameter("ModuleNames", ModuleNames);

			List<XmlClass> myClasses = new ArrayList<XmlClass>();
			int CounterForDataSet = 1;
			int counter = 0;
			Object[] obj2 = new Object[Checked_cases];

			for (int i = 0; i < RowCount; i++) {

				if (ClassPath[i] != null) {

					obj2[counter] = DataSet[i].trim();
					counter++;
				}

			}
			List<String> values = new ArrayList<String>();
			for (Object data : obj2) {
				if (data != null) {
					values.add((String) data);
				}
			}
			String[] target = values.toArray(new String[values.size()]);
			for (String data : target) {
				System.out.println(data + " ");
			}
			TestBase.setTCsDataSet(target);
			
			for (int i = 0; i < RowCount; i++) {
				
				try {
				if (ClassPath[i] != null) {

					String NewTC = ClassPath[i].trim();
					myClasses.add(new XmlClass(NewTC));
					System.out.println("Added class path for execution is : " + ClassPath[i]);
				}

			} catch (Exception e) {
				System.out.println("Error while creating text NG xml file. Check for classpath errors in DB.. " + ExceptionUtils.getStackTrace(e));
			}
				
			}
			myTest.setXmlClasses(myClasses);
			List<XmlTest> myTests = new ArrayList<XmlTest>();
			myTests.add(myTest);
			mySuite.setTests(myTests);
			List<XmlSuite> mySuites = new ArrayList<XmlSuite>();
			mySuites.add(mySuite);
			testng.setXmlSuites(mySuites);
			testng.run();
			System.out.println("Test run completed successfully. Stopping the code execution");
			System.exit(1);

		}

		// ############################################## for the running end
		// TODO Auto-generated method stub
		HashMap<Integer, String> hm = new HashMap<Integer, String>();
		// Create component from the panel which is having all the checkbox
		Component[] SelectedChannel2 = panel1.getComponents();
		int c = 0;
		// Get the values of the check box and map the once checked with number
		for (Component comp : SelectedChannel2) {
			if (comp instanceof JCheckBox) {
				JCheckBox box = (JCheckBox) comp;
				boolean CheckBoxFlag = box.isSelected();
				if (CheckBoxFlag) {
					hm.put(c, box.getLabel());
					// System.out.println(CheckBoxFlag);

				}

			}

			c++;
		}

		int TotalCounts = 0;
		for (Map.Entry m : hm.entrySet()) {
			System.out.println(m.getKey() + " " + m.getValue());
			String Modules = (String) m.getValue();
			BAJ_General_GetAllTSsCount TCsCount = new BAJ_General_GetAllTSsCount();
			if (TotalCounts == 0) {
				TotalCounts = TCsCount.BAJ_General_GetAllTSsCount( Modules);
			} else {

				int TotalCounts2 = TCsCount.BAJ_General_GetAllTSsCount( Modules);

				TotalCounts = TotalCounts + TotalCounts2;
			}
		}

		Object[][] obj = new Object[TotalCounts][8];
		int initailLoopCounter = 0;
		int initailLoopCounter2 = 0;

		// Map the
		for (Map.Entry m : hm.entrySet()) {
			System.out.println(m.getKey() + " " + m.getValue());

			// TESTING
			//

			String Modules = (String) m.getValue();
			BAJ_General_GetAllTSsCount TCsCount = new BAJ_General_GetAllTSsCount();

			int TotalCount = TCsCount.BAJ_General_GetAllTSsCount( Modules);

			Integer initailCounterint = 0;

			// int initailCounter = 1;

			for (int i = 1; i < TotalCount + 1; i++) {
				BAJ_JOL_SetGetAllTCDetailsByModule GetTCDetails = new BAJ_JOL_SetGetAllTCDetailsByModule();
				BAJ_JOL_SetGetAllTSDetails TCDetails = GetTCDetails
						.BAJ_JOL_SetGetAllTCDetailsByModule( initailCounterint + 1, Modules);
				obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetAllTSDetails.getSeq();
				initailLoopCounter2++;
				obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetAllTSDetails.getScenarioDescription();
				initailLoopCounter2++;

				obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetAllTSDetails.getScriptName();
				initailLoopCounter2++;

				obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetAllTSDetails.getDataSet();
				initailLoopCounter2++;

				obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetAllTSDetails.getClassPath();
				initailLoopCounter2++;

				obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetAllTSDetails.getModule();
				initailLoopCounter2++;

				obj[initailLoopCounter][initailLoopCounter2] = BAJ_JOL_SetGetAllTSDetails.getPositiveNegative();
				initailLoopCounter2++;

				obj[initailLoopCounter][initailLoopCounter2] = true;
				initailLoopCounter2++;

				initailLoopCounter2 = 0;
				initailLoopCounter++;
				initailCounterint++;

			}

			;

		}

		jTable1.setModel(new javax.swing.table.DefaultTableModel(obj, new Object[] { "ID", "Description", "Script Name",
				"DataSet", "Class Path", "Module", "Positive/Negative", "Include" }

		)

		{

			private static final long serialVersionUID = 1L;

			@Override
			public Class getColumnClass(int column) {
				switch (column) {
				case 0:
					return String.class;
				case 1:
					return String.class;
				case 2:
					return String.class;
				case 3:
					return String.class;
				case 4:
					return String.class;
				case 5:
					return String.class;
				case 6:
					return String.class;
				default:
					return Boolean.class;
				}

			}

		}

		);

	}

}
